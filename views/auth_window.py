from PySide6.QtGui import QPixmap
from PySide6.QtWidgets import QWidget, QLabel, QMessageBox, QLineEdit
# from controllers.crud import authenticate_user, save_user_session
from ui.ui_auth import Ui_Authorization as LoginUI
from views.app_manager import app_manager
from views.main_window import MainWindow


class Auth(QWidget):
    def __init__(self):
        super().__init__()

        self.ui = LoginUI()
        self.ui.setupUi(self)
        self.connect_signals()

        self.setWindowIcon(QPixmap("ui/resources/app_icon.png"))
        self.background = QLabel(self.ui.frame_2)
        self.background.setGeometry(0, 0, 600, 600)

        pixmap = QPixmap("ui/resources/background.jpg")
        self.background.setPixmap(pixmap)
        self.background.setScaledContents(True)
        self.background.lower()
        self.ui.checkPassword.setText("üëÅÔ∏è‚Äçüó®Ô∏è")
        self.ui.checkPassword.setCheckable(True)
        self.main_window = MainWindow()

    def connect_signals(self):
        self.ui.pushButton.clicked.connect(self.handle_login)
        self.ui.to_register.clicked.connect(self.go_to_register)
        self.ui.checkPassword.clicked.connect(self.check_pwd)
        app_manager.show_auth_signal.connect(self.show_window)
        app_manager.logout_signal.connect(self.handle_logout)

    def go_to_register(self):
        self.hide()
        app_manager.show_reg_signal.emit()

    def handle_login(self):
        login = self.ui.usernameEdit.text()
        password = self.ui.passwordEdit.text()

        if not login or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")
            return

        # –æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –ë–î
        # user = authenticate_user(login, password)
        #
        # if user:
        #     if self.ui.checkBox.isChecked():
        #         save_user_session(user.id)
        #     self.show_main_window(user.id, user.is_teacher, user.is_admin)
        # else:
        #     QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–æ")

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.show_main_window(1)

    def show_main_window(self, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
        self.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        if self.main_window is None:
            self.main_window = MainWindow(user_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.main_window.update_user_data(user_id)

        self.main_window.show()

    def check_pwd(self):
        if self.ui.checkPassword.isChecked():
            self.ui.passwordEdit.setEchoMode(QLineEdit.EchoMode.Normal)
        else:
            self.ui.passwordEdit.setEchoMode(QLineEdit.EchoMode.Password)

    def show_window(self):
        self.show()
        self.raise_()
        self.activateWindow()

    def handle_logout(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ - –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
        self.ui.usernameEdit.clear()
        self.ui.passwordEdit.clear()
        self.ui.checkPassword.setChecked(False)
        self.ui.passwordEdit.setEchoMode(QLineEdit.EchoMode.Password)