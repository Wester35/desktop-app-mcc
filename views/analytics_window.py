from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                               QLabel, QTableWidget, QTableWidgetItem, QMessageBox,
                               QHeaderView, QGroupBox, QTextEdit)
from PySide6.QtCore import Qt

from analytics.ryab import calculate, normalize_data, get_data
from controllers.data_crud import get_all_data_dataframe
from libs.database import get_db
from controllers.analysis_crud import save_analysis_result


class AnalyticsWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å - –ú–µ—Ç–æ–¥ –†—è–±—Ü–µ–≤–∞")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 10px;")
        layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calc_btn = QPushButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å")
        calc_btn.clicked.connect(self.calculate_integral)
        calc_btn.setStyleSheet("background: #2196F3; color: white; padding: 10px;")
        layout.addWidget(calc_btn)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
        results_layout = QVBoxLayout()

        # –¢–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        self.integral_table = QTableWidget()
        self.integral_table.setColumnCount(2)
        self.integral_table.setHorizontalHeaderLabels(["–ì–æ–¥", "–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å"])
        self.integral_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        results_layout.addWidget(QLabel("–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞:"))
        results_layout.addWidget(self.integral_table)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –≤–µ—Å–∞–º–∏
        self.weights_table = QTableWidget()
        self.weights_table.setColumnCount(2)
        self.weights_table.setHorizontalHeaderLabels(["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–í–µ—Å"])
        self.weights_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        results_layout.addWidget(QLabel("–í–µ—Å–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:"))
        results_layout.addWidget(self.weights_table)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        self.interpretation_text = QTextEdit()
        self.interpretation_text.setReadOnly(True)
        self.interpretation_text.setMaximumHeight(150)
        results_layout.addWidget(QLabel("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"))
        results_layout.addWidget(self.interpretation_text)

        results_group.setLayout(results_layout)
        layout.addWidget(results_group)

        self.setLayout(layout)
        self.setWindowTitle("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ú–¶–ö - –ú–µ—Ç–æ–¥ –†—è–±—Ü–µ–≤–∞")
        self.resize(800, 800)

    def calculate_integral(self):
        """–†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
        try:
            db = next(get_db())

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–¥—ã –∏–∑ –±–∞–∑—ã
            from controllers.data_crud import get_all_data
            data = get_all_data(db)
            years = [record.year for record in data]

            if not years:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                return

            data_for_normalize = get_data(db, years)


            results, weights = calculate(normalize_data(data_for_normalize))
            results = results['weighted_sum'].to_dict()
            weights = weights['correlation'].to_dict()
            if not results:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!")
                return


            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for year, value in results.items():
                save_analysis_result(db, year, value)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_results(results, weights)
            self.display_interpretation(weights)

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
            import traceback
            print(traceback.format_exc())  # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏

    def display_results(self, results, weights):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
        # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.integral_table.setRowCount(len(results))
        for row, (year, value) in enumerate(results.items()):
            self.integral_table.setItem(row, 0, QTableWidgetItem(str(year)))
            self.integral_table.setItem(row, 1, QTableWidgetItem(f"{value:.4f}"))

        # –í–µ—Å–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.weights_table.setRowCount(len(weights))
        for row, (indicator, weight) in enumerate(weights.items()):
            self.weights_table.setItem(row, 0, QTableWidgetItem(self.get_indicator_name(indicator)))
            self.weights_table.setItem(row, 1, QTableWidgetItem(f"{weight:.4f}"))

    def display_interpretation(self, weights):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not weights:
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤–µ—Å—É
        sorted_weights = sorted(weights.items(), key=lambda x: x[1], reverse=True)

        interpretation = "üìä –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô –ù–ê –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø:\n\n"

        interpretation += "üéØ –ù–ê–ò–ë–û–õ–¨–®–ï–ï –í–õ–ò–Ø–ù–ò–ï:\n"
        for indicator, weight in sorted_weights[:3]:
            interpretation += f"‚Ä¢ {self.get_indicator_name(indicator)}: {weight:.1%}\n"

        interpretation += "\n‚ö° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        interpretation += f"- –û—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ {self.get_indicator_name(sorted_weights[0][0])}\n"
        interpretation += f"- –í—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä: {self.get_indicator_name(sorted_weights[1][0])}\n"
        interpretation += f"- –¢–∞–∫–∂–µ –∑–Ω–∞—á–∏–º–æ: {self.get_indicator_name(sorted_weights[2][0])}\n"

        self.interpretation_text.setPlainText(interpretation)

    def get_indicator_name(self, key):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
        names = {
            'failures_1': '–û—Ç–∫–∞–∑—ã 1 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'failures_2': '–û—Ç–∫–∞–∑—ã 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'failures_3': '–û—Ç–∫–∞–∑—ã 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'train_losses': '–ü–æ–µ–∑–¥–æ–ø–æ—Ç–µ—Ä–∏',
            'investments': '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è',
            'passengers_daily': '–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—Å—É—Ç.)',
            'tech_failures': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–∞–∑—ã',
            'fare_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞'
        }
        return names.get(key, key)